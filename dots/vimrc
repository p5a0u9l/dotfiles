" PLUGINS
" -------
call pathogen#infect('$VIMHOME/bundle/{}')
call pathogen#helptags()
source $VIMHOME/filetypes.vim
let mapleader = "\<Space>"

" sessions
let g:session_autosave = 'yes'

" completor
let g:completor_python_binary='/Users/paul/.pyenv/shims/python'

" ale
let g:ale_python_executable='/Users/paul/.pyenv/shims/python'
let g:ale_python_flake8_executable='/Users/paul/.pyenv/shims/flake8'
let g:ale_python_pylint_executable='/Users/paul/.pyenv/shims/pylint'
let g:ale_python_pyflakes_executable='/Users/paul/.pyenv/shims/pyflakes'

" Bind F8 to fixing problems with ALE
nmap <F8> <Plug>(ale_fix)
let g:ale_fixers = {
			\   'python': [
			\       'autopep8',
			\   ],
			\}

" fugitive
noremap <leader>gs :Gstatus<cr>

" tagbar
let g:tagbar_width = 45
let g:tagbar_left = 0
nnoremap <silent> <F9> :TagbarToggle<CR>
autocmd BufEnter * nested :call tagbar#autoopen(0)

" nerdtree
let g:NERDTreeWinPos = 'left'
autocmd VimEnter * NERDTree
autocmd BufWinEnter * NERDTreeMirror

" CTRL-P
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'
let g:ctrlp_working_path_mode=0
let g:ctrlp_max_height=20
let g:ctrlp_custom_ignore = {
			\ 'dir':  '\v[\/]\.(git|hg|svn)$',
			\ 'file': '\v\.(exe|so|dll)$'
			\ }

" airline
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
	" unicode symbols
	let g:airline_left_sep = '¬ª'
	let g:airline_left_sep = '‚ñ∂'
	let g:airline_right_sep = '¬´'
	let g:airline_right_sep = '‚óÄ'
	let g:airline_symbols.crypt = 'üîí'
	let g:airline_symbols.linenr = '‚êä'
	let g:airline_symbols.linenr = '‚ê§'
	let g:airline_symbols.linenr = '¬∂'
	let g:airline_symbols.maxlinenr = '‚ò∞'
	let g:airline_symbols.maxlinenr = ''
	let g:airline_symbols.branch = '‚éá'
	let g:airline_symbols.paste = 'œÅ'
	let g:airline_symbols.paste = '√û'
	let g:airline_symbols.paste = '‚à•'
	let g:airline_symbols.spell = 'Íû®'
	let g:airline_symbols.notexists = '‚àÑ'
	let g:airline_symbols.whitespace = 'Œû'
endif

autocmd BufWrite * :call DeleteTrailingWS()

" SETTINGS
" --------
set number
set cursorline
set noshowmode            " don't show the mode
set so=15                 " when moving vertically using j/k
set showcmd               " show the command
let base16colorspace=256  " Access colors present in 256 colorspace
set foldcolumn=0  " Folding settings
set wildignore=*.o,*~,*.pyc  " Ignore compiled files
set wildignore+=.git\*,.hg\*,.svn\*
set hlsearch
set noswapfile
set cmdheight=1  " Height of the command bar
set whichwrap+=<,>,h,l
set magic  " For regular expressions turn magic on
set showmatch  " Show matching brackets
set noerrorbells  " No annoying sound on errors
set novisualbell
set fdm=indent
set background=dark
set ffs=unix,dos,mac
set expandtab  " Use spaces instead of tabs
set shiftwidth=4
set tabstop=4
set linespace=10                   " prefer a slight higher line height
set tw=500
set viminfo^=%  " Remember info about open buffers on close
set wrap "Wrap lines
" Let 'tl' toggle between this and the last accessed tab
let g:lasttab=1
nmap tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

colorscheme Tomorrow-Night-Eighties

" MAPS
" ----
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>
" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=
" move between windows
noremap <c-k> gt
noremap <c-j> gT
" move between panes
noremap <c-h> <c-w><left>
noremap <c-l> <c-w><right>
" move lines +-
noremap - ddp
noremap _ ddkP
" change in quotes (easier to type)
noremap ciq ci"
noremap diq di"
" yank everything from the cursor to the end of the line.
noremap Y y$
" cmd-like navigation
inoremap <C-e> <C-o>$
inoremap <C-a> <C-o>0
inoremap <C-f> <C-o><Right>
inoremap <C-b> <C-o><Left>
" Fast saving
nmap <leader>w :w!<cr>
nmap <leader>q :q!<cr>
" inset line below cursor
nmap <CR> o<esc>
" replace the current word and all its occurrences.
nnoremap <Leader>rc :%s/\<<C-r><C-w>\>/
vnoremap <Leader>rc y:%s/<C-r>"/
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>
" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>
" managing tabs
noremap <C-w>h :tabmove -1<cr>
noremap <C-w>l :tabmove +1<cr>
" Open a new tab with the current buffer's path
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>
" start of line
cnoremap <C-A>		<Home>
" back one character
cnoremap <C-B>		<Left>
" delete character under cursor
cnoremap <C-D>		<Del>
" end of line
cnoremap <C-E>		<End>
" forward one character
cnoremap <C-F>		<Right>
" recall newer command-line
cnoremap <C-N>		<Down>
" recall previous (older) command-line
cnoremap <C-P>		<Up>
" back one word
cnoremap <Esc><C-B>	<S-Left>
" forward one word
cnoremap <Esc><C-F>	<S-Right>

" FUNCTIONS
" --------
" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal! g`\"" |
			\ endif
" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" Delete trailing white space on save, useful for Python
func! DeleteTrailingWS()
	exe "normal mz"
	%s/\s\+$//ge
	exe "normal `z"
endfunc
"
function! VisualSelection(direction, extra_filter) range
	let l:saved_reg = @"
	execute "normal! vgvy"

	let l:pattern = escape(@", '\\/.*$^~[]')
	let l:pattern = substitute(l:pattern, "\n$", "", "")

	if a:direction == 'b'
		execute "normal ?" . l:pattern . "^M"
	elseif a:direction == 'gv'
		call CmdLine("Ag \"" . l:pattern . "\" " )
	elseif a:direction == 'replace'
		call CmdLine("%s" . '/'. l:pattern . '/')
	elseif a:direction == 'f'
		execute "normal /" . l:pattern . "^M"
	endif

	let @/ = l:pattern
	let @" = l:saved_reg
endfunction

" => Vim grep
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
set grepprg=/usr/local/bin/ag
