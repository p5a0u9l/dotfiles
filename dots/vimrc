" PLUGINS
" -------
let mapleader = "\<Space>"

" sessions
let g:session_autosave = 'no'
" set the runtime path to include Vundle and initialize
filetype off

" VUNDLE
" ------
" boostrap
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" Utility
Plugin 'w0rp/ale'
Plugin 'maralla/completor.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'davidhalter/jedi-vim.git'
Plugin 'JuliaEditorSupport/julia-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'flazz/vim-colorschemes'
Plugin 'tpope/vim-commentary'
Plugin 'xolox/vim-easytags'
Plugin 'xolox/vim-misc'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'p5a0u9l/vim-matlab'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'tpope/vim-rsi'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'justinmk/vim-sneak'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'tpope/vim-vinegar'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'SirVer/ultisnips'
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/fzf'
Plugin 'benmills/vimux'

" Markdown / Writting
Plugin 'tpope/vim-markdown'
Plugin 'jtratner/vim-flavored-markdown'

" Theme / Interface
Plugin 'sjl/badwolf'
Plugin 'tomasr/molokai'
Plugin 'zenorocha/dracula-theme', {'rtp': 'vim/'}
Plugin 'junegunn/limelight.vim'
Plugin 'mkarmona/colorsbox'
Plugin 'romainl/Apprentice'
Plugin 'Lokaltog/vim-distinguished'
Plugin 'chriskempson/base16-vim'
Plugin 'w0ng/vim-hybrid'
Plugin 'AlessandroYorba/Sierra'
Plugin 'daylerees/colour-schemes'
Plugin 'effkay/argonaut.vim'
Plugin 'ajh17/Spacegray.vim'
Plugin 'atelierbram/Base2Tone-vim'
Plugin 'colepeters/spacemacs-theme.vim'
call vundle#end()
filetype plugin indent on

" " completor
" let g:completor_python_binary='/usr/bin/env python'

" virtualenv
" let g:virtualenv_directory='$HOME/.pyenv/versions'
let g:virtualenv_stl_format = '[%n]'
let g:virtualenv_auto_activate=1
" " ale
let g:ale_matlab_mlint_executable='/home/paul/opt/matlab_r2017b/bin/glnxa64/mlint'
"
" Move between linting errors
nnoremap ]r :ALENextWrap<CR>
nnoremap [r :ALEPreviousWrap<CR>

" Bind F8 to fixing problems with ALE
nmap <F8> <Plug>(ale_fix)
let g:ale_fixers = {
            \   'python': [
            \       'autopep8',
            \   ],
            \}

" fugitive
noremap <leader>gs :Gstatus<cr>
noremap <leader>gc :Gcommit<cr>

" tagbar
let g:tagbar_width = 45
let g:tagbar_left = 0
nnoremap <silent> <F9> :TagbarToggle<CR>
autocmd BufEnter * nested :call tagbar#autoopen(1)

" NERDTree
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" autocmd vimenter * NERDTree
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeMirror = 1
let g:NERDTreeCWD = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" CTRL-P
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'
let g:ctrlp_working_path_mode=0
let g:ctrlp_max_height=20
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(exe|so|dll)$'
            \ }

" airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
    " unicode symbols
    let g:airline_left_sep = '¬ª'
    let g:airline_left_sep = '‚ñ∂'
    let g:airline_right_sep = '¬´'
    let g:airline_right_sep = '‚óÄ'
    let g:airline_symbols.crypt = 'üîí'
    let g:airline_symbols.linenr = '‚êä'
    let g:airline_symbols.linenr = '‚ê§'
    let g:airline_symbols.linenr = '¬∂'
    let g:airline_symbols.maxlinenr = '‚ò∞'
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.branch = '‚éá'
    let g:airline_symbols.paste = 'œÅ'
    let g:airline_symbols.paste = '√û'
    let g:airline_symbols.paste = '‚à•'
    let g:airline_symbols.spell = 'Íû®'
    let g:airline_symbols.notexists = '‚àÑ'
    let g:airline_symbols.whitespace = 'Œû'
endif

" easytags
let g:easytags_async = 1
autocmd BufWrite * :call DeleteTrailingWS()

" Python
""""""""
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self
au FileType python map <buffer> F :set foldmethod=indent<cr>
au FileType python map <buffer> <leader>1 /\<class\><cr>
au FileType python map <buffer> <leader>2 /\<def\><cr>
au FileType python map <buffer> <leader>3 /\<import\><cr>
au FileType python map <buffer> <leader>db iimport bpdb; bpdb.set_trace()<esc>
au FileType python set colorcolumn=80

" Julia
"""""""
autocmd BufWrite *.jl :call DeleteTrailingWS()

" Matlab
"""""""""""
autocmd BufWrite *.m :call DeleteTrailingWS()
au FileType matlab set colorcolumn=80


" When editing a file, always jump to the last known cursor position.
" Don't do it for commit messages, when the position is invalid, or when
" inside an event handler (happens when dropping a file on gvim).
autocmd BufReadPost *
            \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal g`\"" |
            \ endif

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag -p ~/.agignore --literal --files-with-matches --nocolor --hidden -g "" %s'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 1

    if !exists(":Ag")
        command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
        nnoremap \ :Ag<SPACE>
    endif
endif

" SETTINGS
" --------
set number
set cursorline
set noshowmode            " don't show the mode
set so=15                 " when moving vertically using j/k
set showcmd               " show the command
let base16colorspace=256  " Access colors present in 256 colorspace
set foldcolumn=0  " Folding settings
set wildignore=*.o,*~,*.pyc  " Ignore compiled files
set wildignore+=.git\*,.hg\*,.svn\*
set hlsearch
set noswapfile
set cmdheight=1  " Height of the command bar
set whichwrap+=<,>,h,l
set magic  " For regular expressions turn magic on
set showmatch  " Show matching brackets
set noerrorbells  " No annoying sound on errors
set novisualbell
set fdm=indent
set background=dark
set ffs=unix,dos,mac
set expandtab  " Use spaces instead of tabs
set shiftwidth=4
set tabstop=4
set linespace=10                   " prefer a slight higher line height
set tw=500
set viminfo^=%  " Remember info about open buffers on close
set wrap "Wrap lines
" Let 'tl' toggle between this and the last accessed tab
let g:lasttab=1
nmap tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

colorscheme dracula

" MAPS
" ----
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>
" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=
" move between windows
noremap <c-k> gt
noremap <c-j> gT
" move between panes
" managing tabs
noremap <c-w>h <c-w><left>
noremap <c-w>l <c-w><right>
" move lines +-
noremap - ddp
noremap _ ddkP
" change in quotes (easier to type)
noremap ciq ci"
noremap diq di"
" yank everything from the cursor to the end of the line.
noremap Y y$
" Fast saving
nmap <leader>w :w!<cr>
nmap <leader>q :q!<cr>
" replace the current word and all its occurrences.
nnoremap <Leader>rc :%s/\<<C-r><C-w>\>/
vnoremap <Leader>rc y:%s/<C-r>"/
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>
" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>
" Open a new tab with the current buffer's path
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" FUNCTIONS
" --------
" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif
" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" Delete trailing white space on save, useful for Python
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc
"
function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ag \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" => Vim grep
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
set grepprg=/usr/local/bin/ag
